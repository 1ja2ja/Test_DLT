DLT Viewer User Manual
======================
:Author: Alexander Wenzel <Alexander.AW.Wenzel@bmw.de>
v0.0.2, December 2012: Converted to asciidoc
v0.0.3, April 2013: Added Filetransfer commandline description

:toc:

image::images/genivi_chrome_1_transparent.png[width=128]

Introduction
------------

Purpose
~~~~~~~
The DLT viewer tool is needed to be able to decode, view and store DLT messages 
generated by DLT daemon. The DLT Viewer tool enables the software developer and 
the tester of the device to view the log, control and trace information. It is 
not the goal of GENIVI to provide full functional analyzing tools for traces, 
but to provide at least utilities to control and test all features of the 
DLT daemon component in a simple way. The DLT daemon component and the DLT viewer 
is based on the AUTOSAR 4.0 standard DLT.

We try to keep the GUI simple for an effective and efficient work but to 
integrate as much as functionality as we need.

Feature List
~~~~~~~~~~~~
* TBD

DLT Viewer GUI
--------------
Window, Menu and Toolbar
~~~~~~~~~~~~~~~~~~~~~~~~
image::images/main_window_plain.png[width="100%"]

The screenshot above will give you a quick impression about how the viewer 
could look. The viewer is based on Qt so there are widgets you could move 
around and resize how you like. Your settings of position and size of the 
widgets are stored when you close the viewer so that you have exact the 
same window when you start at the next time.

To get a better understanding about the DLT viewer parts the screenshot 
below marks the relevant areas followed by a description.

image::images/main_window_annotated.png[width="100%"]

[width="100%",style="asciidoc",cols="<5%,<15%,<80%",frame="topbot",options="header"]
|=============================================================================
|Nr|Title|Description
|image:images/Mark1.png[width="32"]|Menu, Toolbar|In the window title you can find the absolute path of your 
project file and the project name. If you start the DLT viewer with no default 
project file it will create an unnamed project. After the project name you 
can read the version of the DLT viewer. In any case of contact with the 
development team, please report the version of the DLT viewer. 

The menu consists of 

* File
* Search
* Project
* Config
* DLT
* Filter
* Plugin
* Help 

...which provides the main functionality to the user which will be described later on. 
The toolbar has the same functions as you can find in the menu. 
|image:images/Mark2.png[width="32"]|Project 

* Config 
* Filter 
* Plugin |The project widget allows you to configure and control the project, 
load an existing project, save a change configuration to the DLT daemon and 
do many other stuff. The project is split into three configuration parts. 

* The Config which contains all connected ECUs/Devices. Each Device contains 
its provided applications. Each application provides its used contexts.
* The Filter part configures the Filters and Marker, which are used show or 
mark only specific DLT messages.
* The Plugin part shows the loaded Plugins. The development team provides a 
Plugin SDK to you. You are able to write your own DLT viewer plugins to decode 
messages or display a GUI. Here is more information about the Plugin SDK. TBD 
In the Settings you can select a default project, which is loaded during start-up. 
|image:images/Mark3.png[width="32"]|DLT Message Table|In the DLT Message table you 
see all DLT messages in the current selected DLT log file. You can scroll through 
the whole log file. New received DLT messages are written into the DLT log file. 
If AutoScroll is enabled in the settings the table scroll always to the end, when 
new DLT messages are received. 

Description of the columns:

* Index + 
Index shows the number of the DLT message in the DLT log file, the header shows all header parameters
* Time + 
Time when the messages was sent.
* Timestamp + 
Time since the startup of the HU
* Count + 
Cyclical counter, one per context. Can be used to detect lost messages.
* Ecuid + 
Name of the sending ECU
* Apid + 
Indetifier of the message sender application. Defined by the sender
* Ctid +
Context indentifier of the message sender. Defined by the sender context.
* Type + 
Type of the message. Log/Trace 
* Subtype + 
Trace type, or Log level. 
* Mode + 
Verbose/Non-Verbose 
* Args + 
How many arguments are in the payload.
* Payload + 
The payload shows all parameters of the log message. 

If a filter is configured, you will see only these DLT messages, which match 
the filter. Remove all filters, if you want to see all messages. 
If some plugins are configured and a DLT message matches a plugin the decoded 
information for Header and Payload is displayed. 
DLT log files can be loaded or saved in the file menu. 
|image:images/Mark4.png[width="32"]|File Transfer Plugin|NC 
|image:images/Mark5.png[width="32"]|DLT Viewer Plugin|NC
|image:images/Mark6.png[width="32"]|Footer|NC
|=============================================================================

Project Widget
~~~~~~~~~~~~~~

Project - Config
^^^^^^^^^^^^^^^^

image:images/project_widget.png[]

In the config window you see a hierarchical list of all configured devices, 
applications and contexts.

* The ECU item lists the ID of the ECU, the status of the ECU (offline, connect, 
online), a description of the ECU including the interface to connect, the default 
log level and the default trace status.
* The application item lists the ID and the description of the application.
* The context item lists the ID , the description and the log level and trace 
status of the context.

If you double click an item you can configure the item. If you select a item and press the right mouse button you get a context menu dependent on the type of selected item:

No ECU is configured yet: 

image:images/ecu_add.png[]


ECU is selected:

image:images/ecu_context_menu.png[]

Application is selected:

image:images/app_context_menu.png[]

Context is selected:

image:images/ctx_context_menu.png[]


Project - Filter
^^^^^^^^^^^^^^^^

image:images/filter_widget.png[]

The Filter list gives you an overview of all configured filters. If at least one filter is configured, only DLT messages which match this filter are displayed.
If you double click on a filter item, you can change the filter.

If you right click with your mouse, you get the following context menu:

image:images/filter_context_menu.png[]

Project - Plugin
^^^^^^^^^^^^^^^^

image:images/plugin_widget.png[]

The plugin list shows you all loaded plugins. 
Plugins are used to decode DLT messages. If you double click on a 
Plugin you get a window where you can select a file which is loaded for the plugin. 
The number shows you, how many description items for each plugin is loaded. 
You get also a summary of all loaded items of a plugin.


Plugin
~~~~~~

The features of the DLT Viewer can be easily extended with a DLT Plugin. 
DLT Plugins have full read access to trace messages, they can decode messages,
modify the representation of in the DLT GUI or send injection messages to the target, 
depending which DLT interfaces is implemented. It's very easy to write your own DLT Plugin 
and examples are provided.

Plugin SDK
^^^^^^^^^^
Here you can find a doxygen documenation of all Plugininterfaces: 

https://userweb.genivi.org/eg-auto/DLT/Documentation/

Summary of the different Plugininterfaces:

[width="100%",style="asciidoc",cols="<30%,<70%",frame="topbot",options="header"]
|=============================================================================
|Plugin Interface|Description
|QDLTPluginInterface|Standard DLT Viewer Plugin Interface. This is the standard DLT Viewer 
Plugin Interface. This interface must be inherited by each DLT Viewer plugin.
|QDLTPluginViewerInterface|Extended DLT Viewer Plugin Interface used by viewer plugins. This 
is an extended DLT Plugin Interface. This interface must be used by viewer plugins. The viewer 
plugin gets full access to the loaded DLT file.
|QDLTPluginDecoderInterface|Extended DLT Viewer Plugin Interface used by decoder plugins. 
This is an extended DLT Plugin Interface. This interface must be used by decoder plugins. 
DLT messages which are displayed are checked by the plugin, if they are valid and then 
decoded by the plugin.
|QDLTPluginControlInterface|Extended DLT Control Plugin Interface used by control plugins. 
This is an extended DLT Plugin Interface. This interface must be used by control plugins. 
The control plugin interface can send control requests to the DLT daemon and receives 
control responses from the DLT daemon. The plugin gets informed about the available 
connections to DLT daemons.
|=============================================================================

nonverboseplugin
~~~~~~~~~~~~~~~~
[width="70%",style="asciidoc",cols="<1s,<2",frame="topbot"]
|=============================================================================
|Interface|QDLTPluginInterface + 
QDLTPluginDecoderInterface
|Plugin Version|1.0.0
|Interface Version|1.0.0
|Dependencies|None
|Description|Decodes the DLT non-verbose messages after catalog file has been loaded.
|Screenshot|None
|=============================================================================


dltviewerplugin
~~~~~~~~~~~~~~~

[width="70%",style="asciidoc",cols="<1s,<2",frame="topbot"]
|=============================================================================
|Interface|QDLTPluginInterface + 
QDltPluginViewerInterface
|Plugin Version|1.0.0
|Interface Version|1.0.0
|Dependencies|None
|Description|Advanced visual representation of a selected log message.
|Screenshot|image:images/viewer_plugin.png[]
|=============================================================================

Filetransfer Plugin
~~~~~~~~~~~~~~~~~~~

In the viewer
^^^^^^^^^^^^^
[width="70%",style="asciidoc",cols="<1s,<2",frame="topbot"]
|=============================================================================
|Interface|QDLTPluginInterface + 
QDltPluginViewerInterface + 
QDltPluginControlInterface
|Plugin Version|1.0.0
|Interface Version|1.0.0
|Dependencies|None
|Description|The user can save files, e.g. screenshots, core dumps etc. to disk 
which are part of the trace file.
|Screenshot|image:images/filetransfer_plugin.png[]
|=============================================================================

Command line usage
^^^^^^^^^^^^^^^^^^
You can use the Filetransfer Plugin to extract files out of a stored dlt file. 

Therefore call the viewer with the command: 

[dlt_viewer.exe] -p project_filetransfer.dlp -l filewithattachements.dlt  -e "Filetransfer Plugin|export|[path_to_extract]" 

.Parameter description

* [dlt_viewer.exe]: The executable of the viewer. E.g. dlt_viewer.exe in Windows, dlt_viewer in Linux 
* project_filetransfer.dlp: A project, which has the filetransfer properly configured, by setting a valid plugin xml. 
* filewithattachements.dlt: Path to a dlt trace file. If it contains embedded files, they will be extracted 
* -e: triggers a plugin command
* "Filetransfer Plugin: Filetransfer Plugin will be called for the command interface
* |export: the export function is called
* |[path_to_extract]": Path to a folder, where you want to extract all file dumps. If you apply this for very many files, think about using individual paths, to avoid overwriting of embedded files with identical names. 




Installation/Remove/Enable/Disable on Windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On windows, two paths are searched for plugins to load. First the application will look 
into folder "plugins" under the main application path. After this, if pluginsPath is 
defined in the settings, the application will also look into the directory defined 
in the settings.

You can install plugins by putting them into one of the directories mentioned.

You can remove plugins by removing them from the directories mentioned.

It is also possible to enable or disable plugins in the application itself. 
To do this, double-click on a plugin in the plugins view. From the drop-down menu 
you can select either enable or disable, which are self explanatory. When enabled, 
messages are passed to the plugin. When disabled, the plugin will be ignored in 
the message processing chain. There is also a third selection, "Enable and Show" 
for plugins with an UI. You can select this to also show the UI of the particular 
plugin.


Installation/Remove/Enable/Disable on Linux
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The installation, removal, enabling and disabling works in similar fashion also in Linux. 
In addition to the previously mentioned folders, the Linux version will also look 
into "/usr/share/dlt-viewer/plugins" for any plugins. Because the install script installs 
the viewer system-wide, you will need to have root permission to modify the plugin 
directories which are installed system wide.

You can use the user defined plugin directory in the settings to point to plugins that 
are no to be used system-wide.

Best Practises
--------------

Connect to ECU
~~~~~~~~~~~~~~

Press the connect button to connect to the target:

image:images/connect_button.png[]

If no ECU is configured, the ECU configuration dialog appears. Select the 
"Interface Type" you want to use TCP or Serial.

image:images/ecu_dialog.png[]

If you use a TCP connection configure the Hostname of the target ECU.

image:images/ecu_dialog_tcp.png[]

If you use a serial port to connect select the serial port. Check the COM port, 
where your serial device is connected in your Windows configuration. A drop down 
list provides you a list of Examples for the Port configuration.

image:images/ecu_dialog_serial.png[]

If you select "OK" the DLT Viewer will try to connect to the ECU. 
The ECU Id shows online, as soon the DLT Viewer is connected to the device.
All received DLT messages should then be displayed in DLT message table.


Available List of Contexts
~~~~~~~~~~~~~~~~~~~~~~~~~~

When you are connected to an ECU, you can get a list of available contexts 
in the ECU. Select an ECU item in the Config window. Right click on the 
selected ECU and select the context menu item "DLT Get Log Info". 
The DLT viewer then send a request to the ECU and gets back a result 
with all available Contexts. The list of available contexts is added 
to your Config list

Working with DLT Log Files
~~~~~~~~~~~~~~~~~~~~~~~~~~

When you start the DLT viewer, a temporary log file is created. 
All received DLT messages are stored in the temporary log file and 
shown in the DLT message table.
Cal the menu "File/Save As" to copy your temporary log file to a 
file you have selected or call "File/New", if you want to create a new log file.

Non Verbose Mode Description
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you receive DLT messages in non verbose mode you want to decode the 
messages and see them in plain text. To do this you have to go to "Plugin". 
Double click on the Plugin "Non Verbose Mode Plugin". In the Dialog select 
the non verbose XML description file, which corresponds to your software 
on the ECU. When you select "OK", the Plugin shows a list of all available 
non verbose messages. As soon as you select a DLT message you can view the 
decoded information.
